on: 
  pull_request:
    # The specific activity types are listed here to include "labeled" and "unlabeled"
    # (which are not included by default for the "pull_request" trigger).
    # This is needed to allow skipping enforcement of the changelog in PRs with specific labels,
    # as defined in the (optional) "skipLabels" property.
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
name: Test
# Stop any in-flight CI jobs when a new commit is pushed.
concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true
jobs:
  dependabot-changelog-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: dangoslen/dependabot-changelog-helper@v3
        with:
          activationLabels: dependencies
          changelogPath: './CHANGELOG.md'
          entryPrefix: 'build(deps): '
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(CHANGELOG.md): add dependency bump from dependabot"
  changelog:
    needs: dependabot-changelog-update
    runs-on: ubuntu-latest
    steps:
    - uses: dangoslen/changelog-enforcer@v3
  config:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Install Rust"
        uses: dtolnay/rust-toolchain@1.83.0 # to install tq via `make config`
      - name: "Generate static app config"
        run: make config
      - name: "Config Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: config-artifact-${{ github.sha }}
          path: pkg/config/config.toml
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Install Rust"
        uses: dtolnay/rust-toolchain@1.83.0 # to install tq via `make config`
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: "Install dependencies"
        run: make dependencies
        shell: bash
      - name: "Run go mod tidy"
        run: make tidy
      - name: "Run go fmt"
        run: make fmt
      # NOTE: We don't download the config artifact in this job.
      # This is because we know Linux is able to generate the configuration file.
      # Which is triggered by the `make vet` pre-requisite target `config`.
      - name: "Run go vet"
        run: make vet
        shell: bash
      - name: "Run revive"
        run: make revive
        shell: bash
      - name: "Static analysis check"
        run: make staticcheck
        shell: bash
      - name: "Security audit"
        run: make gosec
        shell: bash
      - name: "Run go imports"
        run: make imports
        shell: bash
  test:
    needs: [config]
    strategy:
      matrix:
        tinygo-version: [0.31.2]
        go-version: [1.22.x]
        node-version: [18]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Install Go"
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          # IMPORTANT: Disable caching to prevent cache restore errors later.
          cache: false
      - uses: acifani/setup-tinygo@v2
        with:
          tinygo-version: ${{ matrix.tinygo-version }}
      - name: "Install Rust"
        uses: dtolnay/rust-toolchain@1.83.0
      - name: "Add wasm32-wasi Rust target"
        run: rustup target add wasm32-wasi --toolchain 1.83.0
      - name: "Validate Rust toolchain"
        run: rustup show && rustup target list --installed --toolchain 1.83.0
        shell: bash
      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: "Config Artifact"
        uses: actions/download-artifact@v4
        with:
          name: config-artifact-${{ github.sha }}
      - name: "Move Config"
        run: mv config.toml pkg/config/config.toml
      - name: "Modify git cloned repo files 'modified' times"
        run: go run ./scripts/go-test-cache/main.go
      # NOTE: Windows should fail quietly running pre-requisite target of `test`.
      #
      # On Windows, executing `make config` directly works fine.
      # But when `config` is a pre-requisite to running `test`, it fails.
      # But only when run via GitHub Actions.
      # The ../../scripts/config.sh isn't run because you can't nest PowerShell instances.
      # Each GitHub Action 'run' step is a PowerShell instance.
      # And each instance is run as: powershell.exe -command ". '...'"
      - name: "Test suite"
        run: make test
        shell: bash
        env:
          # NOTE: The following lets us focus the test run while debugging.
          # TEST_ARGS: "-run TestBuild ./pkg/commands/compute/..."
          TEST_COMPUTE_INIT: true
          TEST_COMPUTE_BUILD: true
          TEST_COMPUTE_DEPLOY: true
  docker-builds:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: Build docker images
        run: |
          for dockerFile in Dockerfile*; do docker build -f $dockerFile . ; done
